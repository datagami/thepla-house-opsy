datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  EMPLOYEE
  BRANCH_MANAGER
  HR
  MANAGEMENT
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String      @id @default(cuid())
  name            String
  email           String      @unique
  emailVerified   DateTime?   @map("email_verified")
  password        String
  role            UserRole    @default(EMPLOYEE)
  status          UserStatus  @default(PENDING)
  image           String?
  branchId        String?     @map("branch_id")
  managedBranchId String?     @map("managed_branch_id")
  selectedBranchId String?    @map("selected_branch_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  branch        Branch?     @relation(fields: [branchId], references: [id])
  managedBranch Branch?    @relation("BranchManagers", fields: [managedBranchId], references: [id])
  selectedBranch Branch?    @relation("SelectedBranch", fields: [selectedBranchId], references: [id])
  attendance    Attendance[]
  leaveRequests LeaveRequest[]
  approvedBy    User?       @relation("UserApproval", fields: [approvedById], references: [id])
  approvedById  String?     @map("approved_by_id")
  approvedUsers User[]      @relation("UserApproval")

  @@map("users")
  @@index([branchId])
  @@index([managedBranchId])
  @@index([selectedBranchId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Branch {
  id        String   @id @default(cuid())
  name      String
  address   String?
  city      String
  state     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users          User[]
  managers       User[]  @relation("BranchManagers")
  selectedByUsers User[] @relation("SelectedBranch")

  @@map("branches")
}

model Attendance {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  date        DateTime
  checkIn     DateTime @map("check_in")
  checkOut    DateTime? @map("check_out")
  isHalfDay   Boolean  @default(false) @map("is_half_day")
  overtime    Int      @default(0) // in minutes
  isLocked    Boolean  @default(false) @map("is_locked")
  isVerified  Boolean  @default(false) @map("is_verified")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User     @relation(fields: [userId], references: [id])

  @@map("attendance")
}

model LeaveRequest {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  reason      String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User     @relation(fields: [userId], references: [id])

  @@map("leave_requests")
}
