datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  EMPLOYEE
  BRANCH_MANAGER
  HR
  MANAGEMENT
  SELF_ATTENDANCE
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum LeaveType {
  CASUAL
  SICK
  ANNUAL
  UNPAID
  OTHER
}

enum AttendanceStatus {
  PENDING_VERIFICATION
  APPROVED
  REJECTED
}

enum SalaryStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}

enum AdvanceStatus {
  PENDING
  APPROVED
  REJECTED
  SETTLED
}

enum InstallmentStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum UniformStatus {
  ISSUED
  RETURNED
  LOST
  DAMAGED
}

model Account {
  id                 String  @id @default(cuid())
  numId              Int     @default(autoincrement()) @map("num_id")
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  numId        Int      @default(autoincrement()) @map("num_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String      @id @default(cuid())
  numId           Int         @default(autoincrement()) @map("num_id")
  name            String?
  email           String?     @unique
  emailVerified   DateTime?   @map("email_verified")
  password        String?
  role            UserRole    @default(EMPLOYEE)
  status          UserStatus  @default(PENDING)
  image           String?
  branchId        String?     @map("branch_id")
  managedBranchId String?     @map("managed_branch_id")
  selectedBranchId String?    @map("selected_branch_id")
  approvedById    String?     @map("approved_by_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  title           String?
  doj             DateTime?
  department      String?
  mobileNo        String?
  dob             DateTime?
  gender          String?
  panNo           String?
  aadharNo        String?
  salary          Float?
  totalAdvanceBalance Float   @default(0) @map("total_advance_balance")
  totalEmiDeduction  Float    @default(0) @map("total_emi_deduction")
  references      Reference[]
  bankAccountNo   String?
  bankIfscCode    String?
  
  // E-Signature fields
  joiningFormSignedAt DateTime? @map("joining_form_signed_at")
  joiningFormSignedBy String?   @map("joining_form_signed_by")
  joiningFormSignature String?  @map("joining_form_signature")
  joiningFormAgreement Boolean  @default(false) @map("joining_form_agreement")
  joiningFormPhoto String?      @map("joining_form_photo")

  // Relations
  accounts      Account[]
  sessions      Session[]
  branch        Branch?     @relation("BranchUsers", fields: [branchId], references: [id])
  managedBranch Branch?    @relation("BranchManagers", fields: [managedBranchId], references: [id])
  selectedBranch Branch?    @relation("SelectedBranch", fields: [selectedBranchId], references: [id])
  attendance    Attendance[]  @relation("UserAttendance")
  leaveRequests LeaveRequest[]
  approvedBy    User?       @relation("UserApproval", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedUsers User[]      @relation("UserApproval")
  verifiedAttendance  Attendance[] @relation("AttendanceVerifications")

  // New Salary Relations
  salaries            Salary[]
  advances            AdvancePayment[]          @relation("UserAdvances")
  approvedAdvances    AdvancePayment[]          @relation("ApprovedAdvances")

  approvedInstallments AdvancePaymentInstallment[] @relation("InstallmentApprovals")

  // --- Notes Feature Relations ---
  ownedNotes          Note[]                    @relation("NoteOwner")
  sharedNotes         NoteShare[]               @relation("NoteShareUser")
  noteComments        NoteComment[]             @relation("NoteCommentAuthor")
  noteEditHistories   NoteEditHistory[]         @relation("NoteEditHistoryEditor")

  // --- Branch Document Relations ---
  uploadedBranchDocuments BranchDocument[] @relation("BranchDocumentUploads")

  // --- User Document Relations ---
  userDocuments          UserDocument[]
  uploadedUserDocuments  UserDocument[] @relation("UserDocumentUploads")

  // --- Uniform Relations ---
  uniforms              Uniform[]               @relation("UserUniforms")
  issuedUniforms        Uniform[]               @relation("UniformIssuedBy")
  returnedUniforms      Uniform[]               @relation("UniformReturnedBy")

  @@map("users1")
  @@index([branchId])
  @@index([managedBranchId])
  @@index([selectedBranchId])
  @@index([approvedById])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  numId      Int     @default(autoincrement()) @map("num_id")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Branch {
  id        String   @id @default(cuid())
  numId     Int      @default(autoincrement()) @map("num_id")
  name      String   @unique
  address   String?
  city      String
  state     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users          User[] @relation("BranchUsers")
  managers       User[] @relation("BranchManagers")
  selectedByUsers User[] @relation("SelectedBranch")
  attendances    Attendance[]
  documents      BranchDocument[]

  @@map("branches")
}

model DocumentType {
  id          String    @id @default(cuid())
  numId       Int       @default(autoincrement()) @map("num_id")
  name        String    @unique
  description String?
  mandatory   Boolean   @default(false)
  scope       DocumentScope @default(BRANCH)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  documents   BranchDocument[]
  userDocuments UserDocument[]

  @@map("document_types")
}

model BranchDocument {
  id            String    @id @default(cuid())
  numId         Int       @default(autoincrement()) @map("num_id")
  name          String
  description   String?
  fileName      String    @map("file_name")
  fileUrl       String    @map("file_url")
  fileSize      Int       @map("file_size")
  fileType      String    @map("file_type")
  renewalDate   DateTime  @map("renewal_date")
  reminderDate  DateTime  @map("reminder_date")
  uploadedById  String    @map("uploaded_by_id")
  branchId      String    @map("branch_id")
  documentTypeId String?  @map("document_type_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  uploadedBy    User      @relation("BranchDocumentUploads", fields: [uploadedById], references: [id])
  branch        Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  documentType  DocumentType? @relation(fields: [documentTypeId], references: [id])

  @@map("branch_documents")
  @@index([branchId])
  @@index([uploadedById])
  @@index([renewalDate])
  @@index([reminderDate])
  @@index([documentTypeId])
}

// --- User Documents ---

enum DocumentScope {
  BRANCH
  USER
}

model UserDocument {
  id             String    @id @default(cuid())
  numId          Int       @default(autoincrement()) @map("num_id")
  name           String
  description    String?
  fileName       String    @map("file_name")
  fileUrl        String    @map("file_url")
  fileSize       Int       @map("file_size")
  fileType       String    @map("file_type")
  uploadedById   String    @map("uploaded_by_id")
  userId         String    @map("user_id")
  documentTypeId String?   @map("document_type_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  uploadedBy     User       @relation("UserDocumentUploads", fields: [uploadedById], references: [id])
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType   DocumentType? @relation(fields: [documentTypeId], references: [id])

  @@map("user_documents")
  @@index([userId])
  @@index([uploadedById])
  @@index([documentTypeId])
}

model Attendance {
  id          String   @id @default(cuid())
  numId       Int      @default(autoincrement()) @map("num_id")
  userId      String   @map("user_id")
  date        DateTime
  isPresent   Boolean  @default(false) @map("is_present")
  checkIn     String?  @map("check_in")
  checkOut    String?  @map("check_out")
  isHalfDay   Boolean  @default(false) @map("is_half_day")
  overtime    Boolean  @default(false)
  shift1      Boolean  @default(false) @map("shift_1")
  shift2      Boolean  @default(false) @map("shift_2")
  shift3      Boolean  @default(false) @map("shift_3")
  status      AttendanceStatus   @default(PENDING_VERIFICATION) @map("status") // PENDING_VERIFICATION, APPROVED, REJECTED
  verifiedById String? @map("verified_by_id")
  verifiedAt  DateTime? @map("verified_at")
  verificationNote String? @map("verification_note")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation("UserAttendance", fields: [userId], references: [id])
  verifiedBy  User?    @relation("AttendanceVerifications", fields: [verifiedById], references: [id])
  branchId    String
  branch      Branch   @relation(fields: [branchId], references: [id])

  @@unique([id, date])
  @@map("attendance")
  @@index([verifiedById])
  @@index([branchId])
}

model LeaveRequest {
  id          String     @id @default(cuid())
  numId       Int        @default(autoincrement()) @map("num_id")
  userId      String     @map("user_id")
  startDate   DateTime   @map("start_date")
  endDate     DateTime   @map("end_date")
  leaveType   LeaveType
  reason      String
  status      String     @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id])

  @@map("leave_requests")
}

model Reference {
  id        String   @id @default(cuid())
  name      String
  contactNo String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Salary {
  id                String    @id @default(cuid())
  numId             Int       @default(autoincrement())
  userId            String
  month             Int
  year              Int
  baseSalary        Float
  advanceDeduction  Float     @default(0)
  deductions        Float     @default(0)
  overtimeBonus     Float     @default(0)
  otherBonuses      Float     @default(0)
  otherDeductions   Float     @default(0)
  netSalary         Float
  presentDays       Float     @default(0)
  overtimeDays      Int       @default(0)
  halfDays          Int       @default(0)
  leavesEarned      Int       @default(0)
  leaveSalary       Float     @default(0)
  status            String    @default("PENDING")
  paidAt            DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])
  installments      AdvancePaymentInstallment[]

  @@index([userId])
  @@index([month, year])
  @@unique([userId, month, year])
}

model AdvancePayment {
  id               String        @id @default(cuid())
  numId            Int           @default(autoincrement()) @map("num_id")
  userId           String        @map("user_id")
  amount           Float         
  emiAmount        Float         @map("emi_amount")
  remainingAmount  Float         @map("remaining_amount")
  reason           String?       
  status           AdvanceStatus @default(PENDING)
  isSettled        Boolean       @default(false) @map("is_settled")
  approvedById     String?       @map("approved_by_id")
  approvedAt       DateTime?     @map("approved_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  user             User          @relation("UserAdvances", fields: [userId], references: [id], onDelete: Cascade)
  approvedBy       User?         @relation("ApprovedAdvances", fields: [approvedById], references: [id], onDelete: SetNull)
  installments     AdvancePaymentInstallment[]

  @@map("advance_payments")
  @@index([userId])
  @@index([approvedById])
}

model AdvancePaymentInstallment {
  id               String            @id @default(cuid())
  numId            Int               @default(autoincrement()) @map("num_id")
  advanceId        String            @map("advance_id")
  salaryId         String            @map("salary_id")
  userId           String            @map("user_id")
  amountPaid       Float             @map("amount_paid")
  status           InstallmentStatus @default(PENDING)
  approvedById     String?           @map("approved_by_id")
  approvedAt       DateTime?         @map("approved_at")
  paidAt           DateTime?         @map("paid_at")

  // Relations
  advance          AdvancePayment    @relation(fields: [advanceId], references: [id], onDelete: Cascade)
  salary           Salary            @relation(fields: [salaryId], references: [id], onDelete: SetNull)
  approvedBy       User?             @relation("InstallmentApprovals", fields: [approvedById], references: [id], onDelete: SetNull)

  @@map("advance_payment_installments")
  @@index([advanceId])
  @@index([salaryId])
  @@index([approvedById])
}

// --- Uniform Tracking Feature ---

model Uniform {
  id            String        @id @default(cuid())
  numId         Int           @default(autoincrement()) @map("num_id")
  userId        String        @map("user_id")
  itemName      String        @map("item_name")
  itemType      String        @map("item_type") // e.g., "Shirt", "Pants", "Shoes", "Jacket"
  size          String?  
  uniform_number String?
  color         String?       
  quantity      Int           @default(1)
  status        UniformStatus @default(ISSUED)
  issuedAt      DateTime      @map("issued_at")
  returnedAt    DateTime?     @map("returned_at")
  notes         String?       
  issuedById    String?       @map("issued_by_id")
  returnedById  String?       @map("returned_by_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  user          User          @relation("UserUniforms", fields: [userId], references: [id], onDelete: Cascade)
  issuedBy      User?         @relation("UniformIssuedBy", fields: [issuedById], references: [id], onDelete: SetNull)
  returnedBy    User?         @relation("UniformReturnedBy", fields: [returnedById], references: [id], onDelete: SetNull)

  @@map("uniforms")
  @@index([userId])
  @@index([issuedById])
  @@index([returnedById])
  @@index([status])
  @@index([issuedAt])
}

// --- Notes Feature ---

model Note {
  id          String      @id @default(cuid())
  title       String
  content     String
  ownerId     String
  isArchived  Boolean     @default(false)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  owner       User        @relation("NoteOwner", fields: [ownerId], references: [id])
  sharedWith  NoteShare[]
  comments    NoteComment[]
  editHistory NoteEditHistory[]
}

model NoteShare {
  id      String   @id @default(cuid())
  noteId  String
  userId  String

  // Relations
  note    Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user    User     @relation("NoteShareUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
}

model NoteComment {
  id        String   @id @default(cuid())
  noteId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())

  // Relations
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  author    User     @relation("NoteCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
}

model NoteEditHistory {
  id        String   @id @default(cuid())
  noteId    String
  editorId  String
  content   String
  editedAt  DateTime @default(now())

  // Relations
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  editor    User     @relation("NoteEditHistoryEditor", fields: [editorId], references: [id], onDelete: Cascade)
}
