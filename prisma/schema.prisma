datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  EMPLOYEE
  BRANCH_MANAGER
  HR
  MANAGEMENT
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum LeaveType {
  CASUAL
  SICK
  ANNUAL
  UNPAID
  OTHER
}

enum AttendanceStatus {
  PENDING_VERIFICATION
  APPROVED
  REJECTED
}

enum SalaryStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}

enum AdvanceStatus {
  PENDING
  APPROVED
  REJECTED
  SETTLED
}

enum InstallmentStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

model Account {
  id                 String  @id @default(cuid())
  numId              Int     @default(autoincrement()) @map("num_id")
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  numId        Int      @default(autoincrement()) @map("num_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String      @id @default(cuid())
  numId           Int         @default(autoincrement()) @map("num_id")
  name            String?
  email           String?     @unique
  emailVerified   DateTime?   @map("email_verified")
  password        String?
  role            UserRole    @default(EMPLOYEE)
  status          UserStatus  @default(PENDING)
  image           String?
  branchId        String?     @map("branch_id")
  managedBranchId String?     @map("managed_branch_id")
  selectedBranchId String?    @map("selected_branch_id")
  approvedById    String?     @map("approved_by_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  title           String?
  doj             DateTime?
  department      String?
  mobileNo        String?
  dob             DateTime?
  gender          String?
  panNo           String?
  aadharNo        String?
  salary          Float?
  totalAdvanceBalance Float   @default(0) @map("total_advance_balance")
  totalEmiDeduction  Float    @default(0) @map("total_emi_deduction")
  references      Reference[]
  bankAccountNo   String?
  bankIfscCode    String?

  // Relations
  accounts      Account[]
  sessions      Session[]
  branch        Branch?     @relation("BranchUsers", fields: [branchId], references: [id])
  managedBranch Branch?    @relation("BranchManagers", fields: [managedBranchId], references: [id])
  selectedBranch Branch?    @relation("SelectedBranch", fields: [selectedBranchId], references: [id])
  attendance    Attendance[]  @relation("UserAttendance")
  leaveRequests LeaveRequest[]
  approvedBy    User?       @relation("UserApproval", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedUsers User[]      @relation("UserApproval")
  verifiedAttendance  Attendance[] @relation("AttendanceVerifications")

  // New Salary Relations
  salaries            Salary[]
  advances            AdvancePayment[]          @relation("UserAdvances")
  approvedAdvances    AdvancePayment[]          @relation("ApprovedAdvances")

  approvedInstallments AdvancePaymentInstallment[] @relation("InstallmentApprovals")

  @@map("users1")
  @@index([branchId])
  @@index([managedBranchId])
  @@index([selectedBranchId])
  @@index([approvedById])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  numId      Int     @default(autoincrement()) @map("num_id")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Branch {
  id        String   @id @default(cuid())
  numId     Int      @default(autoincrement()) @map("num_id")
  name      String
  address   String?
  city      String
  state     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users          User[] @relation("BranchUsers")
  managers       User[] @relation("BranchManagers")
  selectedByUsers User[] @relation("SelectedBranch")
  attendances    Attendance[]

  @@map("branches")
}

model Attendance {
  id          String   @id @default(cuid())
  numId       Int      @default(autoincrement()) @map("num_id")
  userId      String   @map("user_id")
  date        DateTime
  isPresent   Boolean  @default(false) @map("is_present")
  checkIn     String?  @map("check_in")
  checkOut    String?  @map("check_out")
  isHalfDay   Boolean  @default(false) @map("is_half_day")
  overtime    Boolean  @default(false)
  shift1      Boolean  @default(false) @map("shift_1")
  shift2      Boolean  @default(false) @map("shift_2")
  shift3      Boolean  @default(false) @map("shift_3")
  status      AttendanceStatus   @default(PENDING_VERIFICATION) @map("status") // PENDING_VERIFICATION, APPROVED, REJECTED
  verifiedById String? @map("verified_by_id")
  verifiedAt  DateTime? @map("verified_at")
  verificationNote String? @map("verification_note")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation("UserAttendance", fields: [userId], references: [id])
  verifiedBy  User?    @relation("AttendanceVerifications", fields: [verifiedById], references: [id])
  branchId    String
  branch      Branch   @relation(fields: [branchId], references: [id])

  @@unique([id, date])
  @@map("attendance")
  @@index([verifiedById])
  @@index([branchId])
}

model LeaveRequest {
  id          String     @id @default(cuid())
  numId       Int        @default(autoincrement()) @map("num_id")
  userId      String     @map("user_id")
  startDate   DateTime   @map("start_date")
  endDate     DateTime   @map("end_date")
  leaveType   LeaveType
  reason      String
  status      String     @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id])

  @@map("leave_requests")
}

model Reference {
  id        String   @id @default(cuid())
  name      String
  contactNo String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Salary {
  id                String    @id @default(cuid())
  numId             Int       @default(autoincrement())
  userId            String
  month             Int
  year              Int
  baseSalary        Float
  advanceDeduction  Float     @default(0)
  deductions        Float     @default(0)
  bonuses           Float     @default(0)
  netSalary         Float
  presentDays       Float     @default(0)
  overtimeDays      Int       @default(0)
  halfDays          Int       @default(0)
  leavesEarned      Int       @default(0)
  leaveSalary       Float     @default(0)
  status            String    @default("PENDING")
  paidAt            DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])
  installments      AdvancePaymentInstallment[]

  @@index([userId])
  @@index([month, year])
  @@unique([userId, month, year])
}

model AdvancePayment {
  id               String        @id @default(cuid())
  numId            Int           @default(autoincrement()) @map("num_id")
  userId           String        @map("user_id")
  amount           Float         
  emiAmount        Float         @map("emi_amount")
  remainingAmount  Float         @map("remaining_amount")
  reason           String?       
  status           AdvanceStatus @default(PENDING)
  isSettled        Boolean       @default(false) @map("is_settled")
  approvedById     String?       @map("approved_by_id")
  approvedAt       DateTime?     @map("approved_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  user             User          @relation("UserAdvances", fields: [userId], references: [id], onDelete: Cascade)
  approvedBy       User?         @relation("ApprovedAdvances", fields: [approvedById], references: [id], onDelete: SetNull)
  installments     AdvancePaymentInstallment[]

  @@map("advance_payments")
  @@index([userId])
  @@index([approvedById])
}

model AdvancePaymentInstallment {
  id               String            @id @default(cuid())
  numId            Int               @default(autoincrement()) @map("num_id")
  advanceId        String            @map("advance_id")
  salaryId         String            @map("salary_id")
  userId           String            @map("user_id")
  amountPaid       Float             @map("amount_paid")
  status           InstallmentStatus @default(PENDING)
  approvedById     String?           @map("approved_by_id")
  approvedAt       DateTime?         @map("approved_at")
  paidAt           DateTime?         @map("paid_at")

  // Relations
  advance          AdvancePayment    @relation(fields: [advanceId], references: [id], onDelete: Cascade)
  salary           Salary            @relation(fields: [salaryId], references: [id], onDelete: SetNull)
  approvedBy       User?             @relation("InstallmentApprovals", fields: [approvedById], references: [id], onDelete: SetNull)

  @@map("advance_payment_installments")
  @@index([advanceId])
  @@index([salaryId])
  @@index([approvedById])
}
